{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","FeedbackOptions","options","onLeaveFeedback","map","option","type","feedbackBtn","onClick","Notification","message","text","Statistics","good","neutral","bad","total","positivePercentage","section","table","icon","style","color","fill","buttonOptions","App","useState","setGood","setNeutral","setBad","countTotalFeedback","setCountTotalFeedback","countPositiveFeedbackPercentage","setCountPositiveFeedbackPercentage","useEffect","Math","round","event","target","textContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f748c09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Statistics_table__Eq1jn\",\"section\":\"Statistics_section__13zcv\",\"text\":\"Statistics_text__1iju8\",\"icon\":\"Statistics_icon__rpFCX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2vmnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBtn\":\"FeedbackOptions_feedbackBtn__aQRWq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__kU9gh\"};","import PropTypes from 'prop-types';\r\n\r\nimport s from '../Section/Section.module.css';\r\n\r\nexport function Section({title, children}) {\r\n    return (\r\n        <section>\r\n            <h2 className={s.title}>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n}","import Proptypes from 'prop-types';\r\n\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nexport function FeedbackOptions({ options, onLeaveFeedback }) {\r\n       \r\n    return (\r\n        <div>\r\n            {options.map(option => {\r\n                return (\r\n                    <button type=\"button\" key={option} className={s.feedbackBtn} onClick={onLeaveFeedback}>{option}</button>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: Proptypes.array.isRequired,\r\n    onLeaveFeedback: Proptypes.func.isRequired,\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nimport s from '../Notification/Notification.module.css';\r\n\r\nexport function Notification({ message }) {\r\n    return (\r\n        <p className={s.text}>{message}</p>\r\n    )\r\n}\r\n\r\nNotification.propTypes = {\r\n    message : PropTypes.string.isRequired,\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { FiThumbsUp, FiMeh, FiThumbsDown } from \"react-icons/fi\"; \r\n\r\nimport s from '../Statistics/Statistics.module.css';\r\n\r\nexport function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n    return (\r\n        <div className={s.section}>\r\n            <table className={s.table}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Good <span ><FiThumbsUp className={s.icon } style={{color: '#ffffff', fill: 'green'}}/></span></th>\r\n                        <th>Neutral <FiMeh className={s.icon } style={{color: '#000000', fill:'yellow'}}/></th>\r\n                        <th>Bad <FiThumbsDown className={s.icon } style={{color: '#ffffff', fill:'red'}}/> </th>\r\n                    </tr>\r\n                </thead>\r\n                \r\n                <tbody>\r\n                    <tr>\r\n                        <th>{good}</th>\r\n                        <th>{neutral}</th>\r\n                        <th>{bad}</th>\r\n                    </tr>\r\n                </tbody>\r\n                \r\n            </table >\r\n\r\n            <p className={s.text}>Total: {total}</p>\r\n            <p className={s.text}>Positive feedback: {positivePercentage}%</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}","import { useState, useEffect} from 'react';\nimport { GiCoffeeCup } from 'react-icons/gi';\n\nimport { Section } from './components/Section/Section';\nimport { FeedbackOptions } from './components/FeedbackOptions/FeedbackOptions';\nimport { Notification } from './components/Notification/Notification';\nimport { Statistics } from './components/Statistics/Statistics';\n\nimport './App.css';\n\nconst buttonOptions = ['good', 'neutral', 'bad'];\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [countTotalFeedback, setCountTotalFeedback] = useState(0);\n  const [countPositiveFeedbackPercentage, setCountPositiveFeedbackPercentage] = useState(0);\n\n  const handleCounterIncrement = event => {\n    \n    switch (event.target.textContent) {\n      case 'good':\n        setGood(s => s + 1);\n        break;\n      \n      case 'neutral':\n        setNeutral(s => s + 1);\n        break;\n      \n      case 'bad':\n        setBad(s => s + 1);\n        break;\n           \n      default:\n        return;\n    }\n  }\n\n  useEffect(() => {\n    const countTotalFeedback = good + neutral + bad;\n    setCountTotalFeedback(countTotalFeedback);\n    \n    const countPositiveFeedbackPercentage = Math.round(good * 100 / countTotalFeedback);\n    setCountPositiveFeedbackPercentage(countPositiveFeedbackPercentage);\n          \n  }, [good, neutral, bad]);\n\n  return (\n      <div className=\"App\">\n      <h1 className=\"title\">Expresso <GiCoffeeCup /></h1>\n\n      <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n             options={buttonOptions}\n          onLeaveFeedback={handleCounterIncrement}\n          />\n      </Section>\n\n      <Section title=\"Statistics\">\n        { countTotalFeedback === 0\n          ? <Notification message=\"No feedback given\" />\n          : <Statistics good={good} neutral={neutral} bad={bad}\n              total={countTotalFeedback}\n              positivePercentage={countPositiveFeedbackPercentage}\n            /> \n        }\n      </Section>\n      </div>\n    )\n  }\n\n  export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}